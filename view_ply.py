import numpy as np
import plotly.graph_objects as go

# Example: load your dict
cams = {
    "focals": [
        483.02368,483.02368,483.02368,483.02368,483.02368,
        483.02368,483.02368,483.02368,483.02368,483.02368,
        483.02368,483.02368,483.02368,483.02368,483.02368
    ], 
    "imsize": [
        [512, 288], [512, 288], [512, 288], [512, 288],[512, 288],
        [512, 288], [512, 288], [512, 288], [512, 288],[512, 288],
        [512, 288], [512, 288], [512, 288], [512, 288],[512, 288]
    ], "cams2world": [
  [
    [-0.43948126, -0.55835426, 0.7036314, -1.3858799],
    [-0.09242161, 0.80728453, 0.582881, -0.8681165],
    [-0.8934845, 0.19113442, -0.4063905, 0.68470883],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.92018557, -0.39095366, -0.02033789, 0.10422594],
    [0.39083523, 0.91443825, 0.10512099, 0.0731148],
    [-0.0224997, -0.10467963, 0.9942514, -1.8286538],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.7930267, -0.41155636, 0.44914356, -0.92155236],
    [0.39157987, 0.90916884, 0.14169396, -0.13829106],
    [-0.46666244, 0.06350844, 0.88215226, -1.5544466],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [-0.31186184, -0.69393736, 0.6489941, -1.6082109],
    [-0.02249396, 0.68826085, 0.7251145, -1.416423],
    [-0.9498611, 0.21153708, -0.23025182, 0.38279888],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.2882112, -0.42914757, 0.85601807, -1.6490264],
    [0.22538848, 0.89923763, 0.3749292, -0.56512684],
    [-0.93066347, 0.08487778, 0.35589516, -0.60637206],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [-0.04638201, -0.43288165, 0.90025675, -1.6424289],
    [0.08819397, 0.8959326, 0.43534636, -0.6402709],
    [-0.9950228, 0.09958943, -0.00337774, 0.05990815],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.9137505, -0.39359623, 0.10070698, -0.4037773],
    [0.39794093, 0.91702455, -0.02662539, 0.13170122],
    [-0.08187112, 0.06440439, 0.99455976, -1.9240057],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.7405931, -0.48816562, 0.4617534, -0.9517804],
    [0.3770622, 0.8707045, 0.3157494, -0.38861826],
    [-0.5561888, -0.05973208, 0.8289064, -1.6397601],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.49417055, -0.5325961, 0.68712234, -1.3046045],
    [0.2993573, 0.84628356, 0.44066942, -0.6146902],
    [-0.81619906, -0.01207079, 0.57764477, -0.99128723],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.08288482, -0.5627759, 0.8224436, -1.633702],
    [0.14367265, 0.8234096, 0.5489578, -0.84017515],
    [-0.9861482, 0.07266237, 0.14910352, -0.28379914],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [-0.33709702, -0.5542213, 0.761055, -1.6044844],
    [-0.04524521, 0.8169714, 0.5749006, -0.92031705],
    [-0.94038206, 0.15936315, -0.30047458, 0.49498972],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.8916342, -0.44905072, 0.05780809, -0.3180777],
    [0.40690106, 0.8507615, 0.3326204, -0.56889695],
    [-0.19854434, -0.27305362, 0.9412873, -2.0442896],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.7011861, -0.59114885, 0.3985991, -0.9111963],
    [0.37253162, 0.780445, 0.5021214, -0.8791151],
    [-0.6079131, -0.20358974, 0.7674587, -1.6256645],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.47635943, -0.6651523, 0.57502556, -1.2936134],
    [0.30225128, 0.7380181, 0.60330224, -1.0986185],
    [-0.825667, -0.11358649, 0.55260485, -1.156805],
    [0.0, 0.0, 0.0, 1.0]
  ],
  [
    [0.15378125, -0.7112697, 0.6858914, -1.5916158],
    [0.18316445, 0.7026378, 0.687569, -1.3068469],
    [-0.9709799, 0.01989569, 0.23833174, -0.49014908],
    [0.0, 0.0, 0.0, 1.0]
  ]
]



}

# Make into numpy arrays
cams2world = np.array(cams["cams2world"])  # shape (N,4,4)

# Extract camera centers (translation part)
centers = cams2world[:, :3, 3]

# Extract forward vectors (-Z axis of rotation)
forwards = -cams2world[:, :3, 2]  # because camera looks along -Z in its local frame

# --- Example: load your saved point cloud too ---
scene = np.load("pointcloud.npy", allow_pickle=True)
pts = scene[::3, :3]   # (N,3)
col = scene[::3, 3:]   # (N,3)

# --- Plot ---
fig = go.Figure()

# Point cloud
fig.add_trace(go.Scatter3d(
    x=pts[:,0], y=pts[:,1], z=pts[:,2],
    mode="markers",
    marker=dict(
        size=2,
        color=["rgb({},{},{})".format(r,g,b) for r,g,b in col],
        opacity=0.8
    ),
    name="Points"
))

# Cameras as cones with annotations and axis indicators
axis_length = 0.2
label_offset = 0.15
axis_specs = [
    ("Cam X", "red"),
    ("Cam Y", "green"),
    ("Cam Z", "blue"),
]

for idx, (C, v, R) in enumerate(zip(centers, forwards, cams2world[:, :3, :3])):
    fig.add_trace(go.Cone(
        x=[C[0]], y=[C[1]], z=[C[2]],
        u=[v[0]], v=[v[1]], w=[v[2]],
        sizemode="absolute",
        sizeref=0.2,   # adjust for bigger/smaller cones
        anchor="tip",
        colorscale="Blues",
        showscale=False,
        name="Camera"
    ))

    # Label the camera index slightly ahead in the viewing direction
    v_norm = np.linalg.norm(v)
    offset_dir = v / v_norm if v_norm > 0 else np.array([0.0, 0.0, 1.0])
    label_point = C + offset_dir * label_offset
    fig.add_trace(go.Scatter3d(
        x=[label_point[0]],
        y=[label_point[1]],
        z=[label_point[2]],
        mode="text",
        text=[f"cam {idx}"],
        textfont=dict(color="white"),
        showlegend=False
    ))

    # Add local camera axes as short colored lines
    for axis_idx, (axis_name, color) in enumerate(axis_specs):
        axis_vector = R[:, axis_idx]
        axis_end = C + axis_vector * axis_length
        fig.add_trace(go.Scatter3d(
            x=[C[0], axis_end[0]],
            y=[C[1], axis_end[1]],
            z=[C[2], axis_end[2]],
            mode="lines",
            line=dict(color=color, width=4),
            name=axis_name,
            showlegend=(idx == 0)
        ))

fig.update_layout(
    scene=dict(aspectmode="data"),
    margin=dict(l=0, r=0, t=0, b=0)
)

fig.show()
